% Предикат проверки принадлежности элемента списку
принадлежит(X, [X|_]).
принадлежит(X, [_|Хвост]) :- принадлежит(X, Хвост).

% Предикат для удаления дубликатов из списка
удалить_дубликаты([], []).
удалить_дубликаты([Голова|Хвост], Результат) :-
    принадлежит(Голова, Хвост),
    удалить_дубликаты(Хвост, Результат).
удалить_дубликаты([Голова|Хвост], [Голова|Результат]) :-
    \+ принадлежит(Голова, Хвост),
    удалить_дубликаты(Хвост, Результат).

% Предикат для нахождения пересечения двух множеств
пересечение([], _, []).
пересечение([Голова|Хвост1], Множество2, [Голова|Результат]) :-
    принадлежит(Голова, Множество2),
    пересечение(Хвост1, Множество2, Результат).
пересечение([Голова|Хвост1], Множество2, Результат) :-
    \+ принадлежит(Голова, Множество2),
    пересечение(Хвост1, Множество2, Результат).

% Главный предикат с дружественным интерфейсом
начало :-
    write('=== Нахождение пересечения множеств ==='), nl, nl,
    write('Введите первое множество (список) в формате [a,b,c]: '), nl,
    read(Список1),
    write('Введите второе множество (список) в формате [x,y,z]: '), nl,
    read(Список2),

    % Удаляем возможные дубликаты
    удалить_дубликаты(Список1, Множество1),
    удалить_дубликаты(Список2, Множество2),

    % Находим пересечение
    пересечение(Множество1, Множество2, Результат),

    % Выводим результаты
    nl, write('Первое множество: '), write(Множество1), nl,
    write('Второе множество: '), write(Множество2), nl,
    write('Пересечение: '), write(Результат), nl, nl,

    write('Для выхода введите "стоп", для продолжения - любой символ: '),
    read(Ответ),
    (Ответ \== стоп -> начало; true).
